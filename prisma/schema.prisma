generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int             @id @default(autoincrement())
  username  String          @unique
  password  String
  name      String
  role      Role
  levels    Level[]
  points    Point[]

  isDeleted Boolean         @default(false) @map("is_deleted")
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @default(now()) @map("updated_at")

  @@map("users")
}

model Game {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  rounds    Round[]
  image     String

  isDeleted Boolean         @default(false) @map("is_deleted")
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @default(now()) @map("updated_at")

  @@map("games")
}

model Round {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  gameId    Int             @map(name: "game_id")
  game      Game            @relation(fields: [gameId], references: [id])
  levels    Level[]
  questions Question[]
  image     String


  isDeleted Boolean         @default(false) @map("is_deleted")
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @default(now()) @map("updated_at")

  @@map("rounds")
}

model Level {
  id        Int             @id @default(autoincrement())
  roundId   Int             @map(name: "round_id")
  round     Round           @relation(fields: [roundId], references: [id])
  userId    Int             @map(name: "user_id")
  user      User            @relation(fields: [userId], references: [id])
  status    Boolean

  isDeleted Boolean         @default(false) @map("is_deleted")
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @default(now()) @map("updated_at")

  @@map("levels")
}

model Question {
  id            Int             @id @default(autoincrement())
  roundId       Int             @map(name: "round_id")
  round         Round           @relation(fields: [roundId], references: [id])
  questionText  String          @map(name: "question_text")
  answerText    String          @map(name: "answer_text")
  questionImage String          @map(name: "question_image")
  questionAudio String          @map(name: "question_audio")
  point         Int
  time          Int
  answers       Answer[]
  points        Point[]

  isDeleted     Boolean         @default(false) @map("is_deleted")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @map("updated_at")

  @@map("questions")
}

model Answer {
  id            Int             @id @default(autoincrement())
  questionId    Int             @map(name: "question_id")
  question      Question        @relation(fields: [questionId], references: [id])
  answerText    String          @map(name: "answer_text")

  isDeleted     Boolean         @default(false) @map("is_deleted")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @map("updated_at")

  @@map("answers")
}

model Point {
  id            Int             @id @default(autoincrement())
  questionId    Int             @map(name: "question_id")
  question      Question        @relation(fields: [questionId], references: [id])
  userId        Int             @map(name: "user_id")
  user          User            @relation(fields: [userId], references: [id])
  satus         Boolean         
  comment       String?

  isDeleted     Boolean         @default(false) @map("is_deleted")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @map("updated_at")

  @@map("points")
}

enum Role {
  ADMIN
  USER
}
